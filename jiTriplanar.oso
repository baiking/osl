OpenShadingLanguage 1.00
# Compiled by oslc 1.11.6
# options: 
shader jiTriplanar
param	string	filename	""		%meta{string,widget,"filename"}  %read{410,422} %write{2147483647,-1}
param	string	mapping	"world"		%meta{string,widget,"popup"} %meta{string,options,"world|object"}  %read{1,3} %write{2147483647,-1} %derivs
param	color	input	0 0 0		%read{411,432} %write{2147483647,-1}
param	vector	rotation	0 0 0		%read{5,270} %write{2147483647,-1} %derivs
param	float	xtile	1		%read{419,421} %write{2147483647,-1} %derivs
param	float	xmin	0		%meta{float,min,0} %meta{float,max,1}  %read{326,326} %write{2147483647,-1}
param	float	xmax	1		%meta{float,min,0} %meta{float,max,1}  %read{334,334} %write{2147483647,-1}
param	float	ytile	1		%read{413,415} %write{2147483647,-1} %derivs
param	float	ymin	0		%meta{float,min,0} %meta{float,max,1}  %read{341,341} %write{2147483647,-1}
param	float	ymax	1		%meta{float,min,0} %meta{float,max,1}  %read{349,349} %write{2147483647,-1}
param	float	ztile	1		%read{407,409} %write{2147483647,-1} %derivs
param	float	zmin	0		%meta{float,min,0} %meta{float,max,1}  %read{356,356} %write{2147483647,-1}
param	float	zmax	1		%meta{float,min,0} %meta{float,max,1}  %read{364,364} %write{2147483647,-1}
param	int	use_breakup	0		%meta{string,widget,"checkBox"}  %read{368,368} %write{2147483647,-1}
param	float	breakup_input	0		%read{374,374} %write{2147483647,-1}
param	float	breakup_exponent	1		%read{382,402} %write{2147483647,-1}
oparam	color	outRGB	0 0 0		%read{2147483647,-1} %write{423,423}
oparam	float	outA	0		%read{2147483647,-1} %write{431,431}
oparam	color	outAreaMask	0 0 0		%read{2147483647,-1} %write{434,434}
global	point	P	%read{1,1} %write{2147483647,-1} %derivs
global	normal	N	%read{3,3} %write{2147483647,-1}
local	vector	___257_axis	%read{12,279} %write{9,274} %derivs
local	float	___257_cosang	%read{11,317} %write{10,275} %derivs
local	float	___257_sinang	%read{22,312} %write{10,275} %derivs
local	float	___257_cosang1	%read{21,311} %write{11,276} %derivs
local	float	___257_x	%read{15,312} %write{12,277} %derivs
local	float	___257_y	%read{20,310} %write{13,278} %derivs
local	float	___257_z	%read{22,315} %write{14,279} %derivs
local	matrix	___257_M	%read{56,321} %write{54,319} %derivs
local	point	PP	%read{55,55} %write{1,1} %derivs
local	vector	NN	%read{214,214} %write{4,4}
local	color	pRotX	%read{108,108} %write{57,57} %derivs
local	color	pRotXY	%read{161,161} %write{110,110} %derivs
local	color	pRotXYZ	%read{406,420} %write{163,163} %derivs
local	color	nRotX	%read{267,267} %write{216,216}
local	color	nRotXY	%read{320,320} %write{269,269}
local	color	nRotXYZ	%read{323,353} %write{322,322}
local	float	nNx	%read{370,381} %write{337,337}
local	float	nNy	%read{371,391} %write{352,352}
local	float	nNz	%read{372,401} %write{367,367}
local	float	Nx	%read{423,434} %write{370,385}
local	float	Ny	%read{417,433} %write{371,395}
local	float	Nz	%read{411,432} %write{372,405}
local	float	___338_breakup	%read{376,397} %write{375,375}
const	string	$const1	"transform"		%read{0,2} %write{2147483647,-1}
const	string	$const2	"common"		%read{1,3} %write{2147483647,-1}
temp	normal	$tmp1	%read{4,4} %write{3,3}
const	int	$const3	0		%read{5,412} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{5,5} %derivs
const	float	$const4	57.2957993		%read{6,271} %write{2147483647,-1}
temp	float	$tmp3	%read{10,10} %write{6,6} %derivs
const	point	$const5	0 0 0		%read{8,322} %write{2147483647,-1}
const	point	$const6	1 0 0		%read{8,167} %write{2147483647,-1}
const	string	$const7	"rotate"		%read{7,272} %write{2147483647,-1}
temp	vector	$tmp6	%read{9,9} %write{8,8} %derivs
const	float	$const8	1		%read{11,430} %write{2147483647,-1}
const	int	$const9	1		%read{13,418} %write{2147483647,-1}
const	int	$const10	2		%read{14,420} %write{2147483647,-1}
temp	float	$tmp7	%read{19,19} %write{15,15} %derivs
temp	float	$tmp8	%read{17,17} %write{16,16} %derivs
temp	float	$tmp9	%read{18,18} %write{17,17} %derivs
temp	float	$tmp10	%read{19,19} %write{18,18} %derivs
temp	float	$tmp11	%read{54,54} %write{19,19} %derivs
temp	float	$tmp12	%read{21,21} %write{20,20} %derivs
temp	float	$tmp13	%read{23,23} %write{21,21} %derivs
temp	float	$tmp14	%read{23,23} %write{22,22} %derivs
temp	float	$tmp15	%read{54,54} %write{23,23} %derivs
temp	float	$tmp16	%read{25,25} %write{24,24} %derivs
temp	float	$tmp17	%read{27,27} %write{25,25} %derivs
temp	float	$tmp18	%read{27,27} %write{26,26} %derivs
temp	float	$tmp19	%read{54,54} %write{27,27} %derivs
const	float	$const11	0		%read{54,431} %write{2147483647,-1}
temp	float	$tmp20	%read{29,29} %write{28,28} %derivs
temp	float	$tmp21	%read{31,31} %write{29,29} %derivs
temp	float	$tmp22	%read{31,31} %write{30,30} %derivs
temp	float	$tmp23	%read{54,54} %write{31,31} %derivs
temp	float	$tmp24	%read{36,36} %write{32,32} %derivs
temp	float	$tmp25	%read{34,34} %write{33,33} %derivs
temp	float	$tmp26	%read{35,35} %write{34,34} %derivs
temp	float	$tmp27	%read{36,36} %write{35,35} %derivs
temp	float	$tmp28	%read{54,54} %write{36,36} %derivs
temp	float	$tmp29	%read{38,38} %write{37,37} %derivs
temp	float	$tmp30	%read{40,40} %write{38,38} %derivs
temp	float	$tmp31	%read{40,40} %write{39,39} %derivs
temp	float	$tmp32	%read{54,54} %write{40,40} %derivs
temp	float	$tmp33	%read{42,42} %write{41,41} %derivs
temp	float	$tmp34	%read{44,44} %write{42,42} %derivs
temp	float	$tmp35	%read{44,44} %write{43,43} %derivs
temp	float	$tmp36	%read{54,54} %write{44,44} %derivs
temp	float	$tmp37	%read{46,46} %write{45,45} %derivs
temp	float	$tmp38	%read{48,48} %write{46,46} %derivs
temp	float	$tmp39	%read{48,48} %write{47,47} %derivs
temp	float	$tmp40	%read{54,54} %write{48,48} %derivs
temp	float	$tmp41	%read{53,53} %write{49,49} %derivs
temp	float	$tmp42	%read{51,51} %write{50,50} %derivs
temp	float	$tmp43	%read{52,52} %write{51,51} %derivs
temp	float	$tmp44	%read{53,53} %write{52,52} %derivs
temp	float	$tmp45	%read{54,54} %write{53,53} %derivs
temp	vector	$tmp46	%read{57,57} %write{56,56} %derivs
temp	vector	$tmp47	%read{56,56} %write{55,55} %derivs
temp	float	$tmp48	%read{59,59} %write{58,58} %derivs
temp	float	$tmp49	%read{63,63} %write{59,59} %derivs
const	point	$const12	0 1 0		%read{61,220} %write{2147483647,-1}
temp	vector	$tmp52	%read{62,62} %write{61,61} %derivs
temp	float	$tmp53	%read{72,72} %write{68,68} %derivs
temp	float	$tmp54	%read{70,70} %write{69,69} %derivs
temp	float	$tmp55	%read{71,71} %write{70,70} %derivs
temp	float	$tmp56	%read{72,72} %write{71,71} %derivs
temp	float	$tmp57	%read{107,107} %write{72,72} %derivs
temp	float	$tmp58	%read{74,74} %write{73,73} %derivs
temp	float	$tmp59	%read{76,76} %write{74,74} %derivs
temp	float	$tmp60	%read{76,76} %write{75,75} %derivs
temp	float	$tmp61	%read{107,107} %write{76,76} %derivs
temp	float	$tmp62	%read{78,78} %write{77,77} %derivs
temp	float	$tmp63	%read{80,80} %write{78,78} %derivs
temp	float	$tmp64	%read{80,80} %write{79,79} %derivs
temp	float	$tmp65	%read{107,107} %write{80,80} %derivs
temp	float	$tmp66	%read{82,82} %write{81,81} %derivs
temp	float	$tmp67	%read{84,84} %write{82,82} %derivs
temp	float	$tmp68	%read{84,84} %write{83,83} %derivs
temp	float	$tmp69	%read{107,107} %write{84,84} %derivs
temp	float	$tmp70	%read{89,89} %write{85,85} %derivs
temp	float	$tmp71	%read{87,87} %write{86,86} %derivs
temp	float	$tmp72	%read{88,88} %write{87,87} %derivs
temp	float	$tmp73	%read{89,89} %write{88,88} %derivs
temp	float	$tmp74	%read{107,107} %write{89,89} %derivs
temp	float	$tmp75	%read{91,91} %write{90,90} %derivs
temp	float	$tmp76	%read{93,93} %write{91,91} %derivs
temp	float	$tmp77	%read{93,93} %write{92,92} %derivs
temp	float	$tmp78	%read{107,107} %write{93,93} %derivs
temp	float	$tmp79	%read{95,95} %write{94,94} %derivs
temp	float	$tmp80	%read{97,97} %write{95,95} %derivs
temp	float	$tmp81	%read{97,97} %write{96,96} %derivs
temp	float	$tmp82	%read{107,107} %write{97,97} %derivs
temp	float	$tmp83	%read{99,99} %write{98,98} %derivs
temp	float	$tmp84	%read{101,101} %write{99,99} %derivs
temp	float	$tmp85	%read{101,101} %write{100,100} %derivs
temp	float	$tmp86	%read{107,107} %write{101,101} %derivs
temp	float	$tmp87	%read{106,106} %write{102,102} %derivs
temp	float	$tmp88	%read{104,104} %write{103,103} %derivs
temp	float	$tmp89	%read{105,105} %write{104,104} %derivs
temp	float	$tmp90	%read{106,106} %write{105,105} %derivs
temp	float	$tmp91	%read{107,107} %write{106,106} %derivs
temp	vector	$tmp92	%read{110,110} %write{109,109} %derivs
temp	vector	$tmp93	%read{109,109} %write{108,108} %derivs
temp	float	$tmp94	%read{112,112} %write{111,111} %derivs
temp	float	$tmp95	%read{116,116} %write{112,112} %derivs
const	point	$const13	0 0 1		%read{114,273} %write{2147483647,-1}
temp	vector	$tmp98	%read{115,115} %write{114,114} %derivs
temp	float	$tmp99	%read{125,125} %write{121,121} %derivs
temp	float	$tmp100	%read{123,123} %write{122,122} %derivs
temp	float	$tmp101	%read{124,124} %write{123,123} %derivs
temp	float	$tmp102	%read{125,125} %write{124,124} %derivs
temp	float	$tmp103	%read{160,160} %write{125,125} %derivs
temp	float	$tmp104	%read{127,127} %write{126,126} %derivs
temp	float	$tmp105	%read{129,129} %write{127,127} %derivs
temp	float	$tmp106	%read{129,129} %write{128,128} %derivs
temp	float	$tmp107	%read{160,160} %write{129,129} %derivs
temp	float	$tmp108	%read{131,131} %write{130,130} %derivs
temp	float	$tmp109	%read{133,133} %write{131,131} %derivs
temp	float	$tmp110	%read{133,133} %write{132,132} %derivs
temp	float	$tmp111	%read{160,160} %write{133,133} %derivs
temp	float	$tmp112	%read{135,135} %write{134,134} %derivs
temp	float	$tmp113	%read{137,137} %write{135,135} %derivs
temp	float	$tmp114	%read{137,137} %write{136,136} %derivs
temp	float	$tmp115	%read{160,160} %write{137,137} %derivs
temp	float	$tmp116	%read{142,142} %write{138,138} %derivs
temp	float	$tmp117	%read{140,140} %write{139,139} %derivs
temp	float	$tmp118	%read{141,141} %write{140,140} %derivs
temp	float	$tmp119	%read{142,142} %write{141,141} %derivs
temp	float	$tmp120	%read{160,160} %write{142,142} %derivs
temp	float	$tmp121	%read{144,144} %write{143,143} %derivs
temp	float	$tmp122	%read{146,146} %write{144,144} %derivs
temp	float	$tmp123	%read{146,146} %write{145,145} %derivs
temp	float	$tmp124	%read{160,160} %write{146,146} %derivs
temp	float	$tmp125	%read{148,148} %write{147,147} %derivs
temp	float	$tmp126	%read{150,150} %write{148,148} %derivs
temp	float	$tmp127	%read{150,150} %write{149,149} %derivs
temp	float	$tmp128	%read{160,160} %write{150,150} %derivs
temp	float	$tmp129	%read{152,152} %write{151,151} %derivs
temp	float	$tmp130	%read{154,154} %write{152,152} %derivs
temp	float	$tmp131	%read{154,154} %write{153,153} %derivs
temp	float	$tmp132	%read{160,160} %write{154,154} %derivs
temp	float	$tmp133	%read{159,159} %write{155,155} %derivs
temp	float	$tmp134	%read{157,157} %write{156,156} %derivs
temp	float	$tmp135	%read{158,158} %write{157,157} %derivs
temp	float	$tmp136	%read{159,159} %write{158,158} %derivs
temp	float	$tmp137	%read{160,160} %write{159,159} %derivs
temp	vector	$tmp138	%read{163,163} %write{162,162} %derivs
temp	vector	$tmp139	%read{162,162} %write{161,161} %derivs
temp	float	$tmp140	%read{165,165} %write{164,164} %derivs
temp	float	$tmp141	%read{169,169} %write{165,165} %derivs
temp	vector	$tmp144	%read{168,168} %write{167,167} %derivs
temp	float	$tmp145	%read{178,178} %write{174,174} %derivs
temp	float	$tmp146	%read{176,176} %write{175,175} %derivs
temp	float	$tmp147	%read{177,177} %write{176,176} %derivs
temp	float	$tmp148	%read{178,178} %write{177,177} %derivs
temp	float	$tmp149	%read{213,213} %write{178,178} %derivs
temp	float	$tmp150	%read{180,180} %write{179,179} %derivs
temp	float	$tmp151	%read{182,182} %write{180,180} %derivs
temp	float	$tmp152	%read{182,182} %write{181,181} %derivs
temp	float	$tmp153	%read{213,213} %write{182,182} %derivs
temp	float	$tmp154	%read{184,184} %write{183,183} %derivs
temp	float	$tmp155	%read{186,186} %write{184,184} %derivs
temp	float	$tmp156	%read{186,186} %write{185,185} %derivs
temp	float	$tmp157	%read{213,213} %write{186,186} %derivs
temp	float	$tmp158	%read{188,188} %write{187,187} %derivs
temp	float	$tmp159	%read{190,190} %write{188,188} %derivs
temp	float	$tmp160	%read{190,190} %write{189,189} %derivs
temp	float	$tmp161	%read{213,213} %write{190,190} %derivs
temp	float	$tmp162	%read{195,195} %write{191,191} %derivs
temp	float	$tmp163	%read{193,193} %write{192,192} %derivs
temp	float	$tmp164	%read{194,194} %write{193,193} %derivs
temp	float	$tmp165	%read{195,195} %write{194,194} %derivs
temp	float	$tmp166	%read{213,213} %write{195,195} %derivs
temp	float	$tmp167	%read{197,197} %write{196,196} %derivs
temp	float	$tmp168	%read{199,199} %write{197,197} %derivs
temp	float	$tmp169	%read{199,199} %write{198,198} %derivs
temp	float	$tmp170	%read{213,213} %write{199,199} %derivs
temp	float	$tmp171	%read{201,201} %write{200,200} %derivs
temp	float	$tmp172	%read{203,203} %write{201,201} %derivs
temp	float	$tmp173	%read{203,203} %write{202,202} %derivs
temp	float	$tmp174	%read{213,213} %write{203,203} %derivs
temp	float	$tmp175	%read{205,205} %write{204,204} %derivs
temp	float	$tmp176	%read{207,207} %write{205,205} %derivs
temp	float	$tmp177	%read{207,207} %write{206,206} %derivs
temp	float	$tmp178	%read{213,213} %write{207,207} %derivs
temp	float	$tmp179	%read{212,212} %write{208,208} %derivs
temp	float	$tmp180	%read{210,210} %write{209,209} %derivs
temp	float	$tmp181	%read{211,211} %write{210,210} %derivs
temp	float	$tmp182	%read{212,212} %write{211,211} %derivs
temp	float	$tmp183	%read{213,213} %write{212,212} %derivs
temp	vector	$tmp184	%read{216,216} %write{215,215}
temp	vector	$tmp185	%read{215,215} %write{214,214}
temp	float	$tmp186	%read{218,218} %write{217,217} %derivs
temp	float	$tmp187	%read{222,222} %write{218,218} %derivs
temp	vector	$tmp190	%read{221,221} %write{220,220} %derivs
temp	float	$tmp191	%read{231,231} %write{227,227} %derivs
temp	float	$tmp192	%read{229,229} %write{228,228} %derivs
temp	float	$tmp193	%read{230,230} %write{229,229} %derivs
temp	float	$tmp194	%read{231,231} %write{230,230} %derivs
temp	float	$tmp195	%read{266,266} %write{231,231} %derivs
temp	float	$tmp196	%read{233,233} %write{232,232} %derivs
temp	float	$tmp197	%read{235,235} %write{233,233} %derivs
temp	float	$tmp198	%read{235,235} %write{234,234} %derivs
temp	float	$tmp199	%read{266,266} %write{235,235} %derivs
temp	float	$tmp200	%read{237,237} %write{236,236} %derivs
temp	float	$tmp201	%read{239,239} %write{237,237} %derivs
temp	float	$tmp202	%read{239,239} %write{238,238} %derivs
temp	float	$tmp203	%read{266,266} %write{239,239} %derivs
temp	float	$tmp204	%read{241,241} %write{240,240} %derivs
temp	float	$tmp205	%read{243,243} %write{241,241} %derivs
temp	float	$tmp206	%read{243,243} %write{242,242} %derivs
temp	float	$tmp207	%read{266,266} %write{243,243} %derivs
temp	float	$tmp208	%read{248,248} %write{244,244} %derivs
temp	float	$tmp209	%read{246,246} %write{245,245} %derivs
temp	float	$tmp210	%read{247,247} %write{246,246} %derivs
temp	float	$tmp211	%read{248,248} %write{247,247} %derivs
temp	float	$tmp212	%read{266,266} %write{248,248} %derivs
temp	float	$tmp213	%read{250,250} %write{249,249} %derivs
temp	float	$tmp214	%read{252,252} %write{250,250} %derivs
temp	float	$tmp215	%read{252,252} %write{251,251} %derivs
temp	float	$tmp216	%read{266,266} %write{252,252} %derivs
temp	float	$tmp217	%read{254,254} %write{253,253} %derivs
temp	float	$tmp218	%read{256,256} %write{254,254} %derivs
temp	float	$tmp219	%read{256,256} %write{255,255} %derivs
temp	float	$tmp220	%read{266,266} %write{256,256} %derivs
temp	float	$tmp221	%read{258,258} %write{257,257} %derivs
temp	float	$tmp222	%read{260,260} %write{258,258} %derivs
temp	float	$tmp223	%read{260,260} %write{259,259} %derivs
temp	float	$tmp224	%read{266,266} %write{260,260} %derivs
temp	float	$tmp225	%read{265,265} %write{261,261} %derivs
temp	float	$tmp226	%read{263,263} %write{262,262} %derivs
temp	float	$tmp227	%read{264,264} %write{263,263} %derivs
temp	float	$tmp228	%read{265,265} %write{264,264} %derivs
temp	float	$tmp229	%read{266,266} %write{265,265} %derivs
temp	vector	$tmp230	%read{269,269} %write{268,268}
temp	vector	$tmp231	%read{268,268} %write{267,267}
temp	float	$tmp232	%read{271,271} %write{270,270} %derivs
temp	float	$tmp233	%read{275,275} %write{271,271} %derivs
temp	vector	$tmp236	%read{274,274} %write{273,273} %derivs
temp	float	$tmp237	%read{284,284} %write{280,280} %derivs
temp	float	$tmp238	%read{282,282} %write{281,281} %derivs
temp	float	$tmp239	%read{283,283} %write{282,282} %derivs
temp	float	$tmp240	%read{284,284} %write{283,283} %derivs
temp	float	$tmp241	%read{319,319} %write{284,284} %derivs
temp	float	$tmp242	%read{286,286} %write{285,285} %derivs
temp	float	$tmp243	%read{288,288} %write{286,286} %derivs
temp	float	$tmp244	%read{288,288} %write{287,287} %derivs
temp	float	$tmp245	%read{319,319} %write{288,288} %derivs
temp	float	$tmp246	%read{290,290} %write{289,289} %derivs
temp	float	$tmp247	%read{292,292} %write{290,290} %derivs
temp	float	$tmp248	%read{292,292} %write{291,291} %derivs
temp	float	$tmp249	%read{319,319} %write{292,292} %derivs
temp	float	$tmp250	%read{294,294} %write{293,293} %derivs
temp	float	$tmp251	%read{296,296} %write{294,294} %derivs
temp	float	$tmp252	%read{296,296} %write{295,295} %derivs
temp	float	$tmp253	%read{319,319} %write{296,296} %derivs
temp	float	$tmp254	%read{301,301} %write{297,297} %derivs
temp	float	$tmp255	%read{299,299} %write{298,298} %derivs
temp	float	$tmp256	%read{300,300} %write{299,299} %derivs
temp	float	$tmp257	%read{301,301} %write{300,300} %derivs
temp	float	$tmp258	%read{319,319} %write{301,301} %derivs
temp	float	$tmp259	%read{303,303} %write{302,302} %derivs
temp	float	$tmp260	%read{305,305} %write{303,303} %derivs
temp	float	$tmp261	%read{305,305} %write{304,304} %derivs
temp	float	$tmp262	%read{319,319} %write{305,305} %derivs
temp	float	$tmp263	%read{307,307} %write{306,306} %derivs
temp	float	$tmp264	%read{309,309} %write{307,307} %derivs
temp	float	$tmp265	%read{309,309} %write{308,308} %derivs
temp	float	$tmp266	%read{319,319} %write{309,309} %derivs
temp	float	$tmp267	%read{311,311} %write{310,310} %derivs
temp	float	$tmp268	%read{313,313} %write{311,311} %derivs
temp	float	$tmp269	%read{313,313} %write{312,312} %derivs
temp	float	$tmp270	%read{319,319} %write{313,313} %derivs
temp	float	$tmp271	%read{318,318} %write{314,314} %derivs
temp	float	$tmp272	%read{316,316} %write{315,315} %derivs
temp	float	$tmp273	%read{317,317} %write{316,316} %derivs
temp	float	$tmp274	%read{318,318} %write{317,317} %derivs
temp	float	$tmp275	%read{319,319} %write{318,318} %derivs
temp	vector	$tmp276	%read{322,322} %write{321,321}
temp	vector	$tmp277	%read{321,321} %write{320,320}
temp	float	$tmp278	%read{332,332} %write{331,331}
temp	float	$tmp279	%read{325,325} %write{324,324}
temp	float	$tmp280	%read{324,324} %write{323,323}
temp	float	$tmp281	%read{328,328} %write{325,325}
temp	float	$tmp282	%read{327,327} %write{326,326}
temp	float	$tmp283	%read{328,328} %write{327,327}
temp	float	$tmp284	%read{330,330} %write{328,328}
const	string	$const14	"clamp"		%read{329,429} %write{2147483647,-1}
temp	float	$tmp285	%read{331,331} %write{330,330}
temp	float	$tmp286	%read{333,333} %write{332,332}
temp	float	$tmp287	%read{334,334} %write{333,333}
temp	float	$tmp288	%read{336,336} %write{334,334}
temp	float	$tmp289	%read{337,337} %write{336,336}
temp	float	$tmp290	%read{347,347} %write{346,346}
temp	float	$tmp291	%read{340,340} %write{339,339}
temp	float	$tmp292	%read{339,339} %write{338,338}
temp	float	$tmp293	%read{343,343} %write{340,340}
temp	float	$tmp294	%read{342,342} %write{341,341}
temp	float	$tmp295	%read{343,343} %write{342,342}
temp	float	$tmp296	%read{345,345} %write{343,343}
temp	float	$tmp297	%read{346,346} %write{345,345}
temp	float	$tmp298	%read{348,348} %write{347,347}
temp	float	$tmp299	%read{349,349} %write{348,348}
temp	float	$tmp300	%read{351,351} %write{349,349}
temp	float	$tmp301	%read{352,352} %write{351,351}
temp	float	$tmp302	%read{362,362} %write{361,361}
temp	float	$tmp303	%read{355,355} %write{354,354}
temp	float	$tmp304	%read{354,354} %write{353,353}
temp	float	$tmp305	%read{358,358} %write{355,355}
temp	float	$tmp306	%read{357,357} %write{356,356}
temp	float	$tmp307	%read{358,358} %write{357,357}
temp	float	$tmp308	%read{360,360} %write{358,358}
temp	float	$tmp309	%read{361,361} %write{360,360}
temp	float	$tmp310	%read{363,363} %write{362,362}
temp	float	$tmp311	%read{364,364} %write{363,363}
temp	float	$tmp312	%read{366,366} %write{364,364}
temp	float	$tmp313	%read{367,367} %write{366,366}
temp	int	$tmp314	%read{369,369} %write{368,368}
temp	float	$tmp315	%read{375,375} %write{374,374}
temp	float	$tmp316	%read{384,384} %write{382,382}
temp	float	$tmp317	%read{380,380} %write{376,376}
const	float	$const15	2		%read{376,396} %write{2147483647,-1}
temp	float	$tmp318	%read{378,378} %write{377,377}
temp	float	$tmp319	%read{379,379} %write{378,378}
temp	float	$tmp320	%read{380,380} %write{379,379}
temp	float	$tmp321	%read{381,381} %write{380,380}
temp	float	$tmp322	%read{382,382} %write{381,381}
temp	float	$tmp323	%read{385,385} %write{384,384}
temp	float	$tmp324	%read{394,394} %write{392,392}
temp	float	$tmp325	%read{390,390} %write{386,386}
temp	float	$tmp326	%read{388,388} %write{387,387}
temp	float	$tmp327	%read{389,389} %write{388,388}
temp	float	$tmp328	%read{390,390} %write{389,389}
temp	float	$tmp329	%read{391,391} %write{390,390}
temp	float	$tmp330	%read{392,392} %write{391,391}
temp	float	$tmp331	%read{395,395} %write{394,394}
temp	float	$tmp332	%read{404,404} %write{402,402}
temp	float	$tmp333	%read{400,400} %write{396,396}
temp	float	$tmp334	%read{398,398} %write{397,397}
temp	float	$tmp335	%read{399,399} %write{398,398}
temp	float	$tmp336	%read{400,400} %write{399,399}
temp	float	$tmp337	%read{401,401} %write{400,400}
temp	float	$tmp338	%read{402,402} %write{401,401}
temp	float	$tmp339	%read{405,405} %write{404,404}
temp	color	$tmp340	%read{423,423} %write{417,417}
temp	color	$tmp341	%read{417,417} %write{411,411}
temp	color	$tmp342	%read{411,411} %write{410,410}
temp	float	$tmp343	%read{407,407} %write{406,406} %derivs
temp	float	$tmp344	%read{410,410} %write{407,407} %derivs
temp	float	$tmp345	%read{409,409} %write{408,408} %derivs
temp	float	$tmp346	%read{410,410} %write{409,409} %derivs
const	string	$const16	"wrap"		%read{410,422} %write{2147483647,-1}
const	string	$const17	"periodic"		%read{410,422} %write{2147483647,-1}
temp	color	$tmp347	%read{417,417} %write{416,416}
temp	float	$tmp348	%read{413,413} %write{412,412} %derivs
temp	float	$tmp349	%read{416,416} %write{413,413} %derivs
temp	float	$tmp350	%read{415,415} %write{414,414} %derivs
temp	float	$tmp351	%read{416,416} %write{415,415} %derivs
temp	color	$tmp352	%read{423,423} %write{422,422}
temp	float	$tmp353	%read{419,419} %write{418,418} %derivs
temp	float	$tmp354	%read{422,422} %write{419,419} %derivs
temp	float	$tmp355	%read{421,421} %write{420,420} %derivs
temp	float	$tmp356	%read{422,422} %write{421,421} %derivs
temp	float	$tmp357	%read{425,425} %write{424,424}
temp	float	$tmp358	%read{428,428} %write{425,425}
temp	float	$tmp359	%read{427,427} %write{426,426}
temp	float	$tmp360	%read{428,428} %write{427,427}
temp	float	$tmp361	%read{430,430} %write{428,428}
temp	float	$tmp362	%read{431,431} %write{430,430}
temp	color	$tmp363	%read{434,434} %write{433,433}
temp	color	$tmp364	%read{433,433} %write{432,432}
const	color	$const18	0 0 1		%read{432,432} %write{2147483647,-1}
const	color	$const19	0 1 0		%read{433,433} %write{2147483647,-1}
const	color	$const20	1 0 0		%read{434,434} %write{2147483647,-1}
code ___main___
# jiTriplanar.osl:42
#     point PP = transform(mapping, P);
	functioncall	$const1 2 	%filename{"jiTriplanar.osl"} %line{42} %argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:263
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	PP $const2 mapping P 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{263} %argrw{"wrrr"}
# jiTriplanar.osl:43
#     vector NN = normalize(transform(mapping, N));
	functioncall	$const1 4 	%filename{"jiTriplanar.osl"} %line{43} %argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:261
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	$tmp1 $const2 mapping N 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{261} %argrw{"wrrr"}
# jiTriplanar.osl:43
#     vector NN = normalize(transform(mapping, N));
	normalize	NN $tmp1 	%filename{"jiTriplanar.osl"} %line{43} %argrw{"wr"}
# jiTriplanar.osl:47
#     color pRotX = rotate(PP, (rotation[0]/57.2958), point(0.0,0.0,0.0), point(1.0,0.0,0.0));
	compref		$tmp2 rotation $const3 	%line{47} %argrw{"wrr"}
	div		$tmp3 $tmp2 $const4 	%argrw{"wrr"}
	functioncall	$const7 58 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp6 $const6 $const5 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp6 	%argrw{"wr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp3 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const8 ___257_cosang 	%line{273} %argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const3 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const9 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const10 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp7 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp8 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp9 $const8 $tmp8 	%argrw{"wrr"}
	mul		$tmp10 $tmp9 ___257_cosang 	%argrw{"wrr"}
	add		$tmp11 $tmp7 $tmp10 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp12 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp13 $tmp12 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp14 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp16 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp17 $tmp16 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp18 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp19 $tmp17 $tmp18 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp20 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp21 $tmp20 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp22 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp23 $tmp21 $tmp22 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp24 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp25 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp26 $const8 $tmp25 	%argrw{"wrr"}
	mul		$tmp27 $tmp26 ___257_cosang 	%argrw{"wrr"}
	add		$tmp28 $tmp24 $tmp27 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp29 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp30 $tmp29 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp31 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp33 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp34 $tmp33 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp35 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp36 $tmp34 $tmp35 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp37 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp38 $tmp37 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp39 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp41 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp42 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp43 $const8 $tmp42 	%argrw{"wrr"}
	mul		$tmp44 $tmp43 ___257_cosang 	%argrw{"wrr"}
	add		$tmp45 $tmp41 $tmp44 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp11 $tmp15 $tmp19 $const11 $tmp23 $tmp28 $tmp32 $const11 $tmp36 $tmp40 $tmp45 $const11 $const11 $const11 $const11 $const8 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp47 PP $const5 	%line{288} %argrw{"wrr"}
	transformv	$tmp46 ___257_M $tmp47 	%argrw{"wrr"}
	add		pRotX $tmp46 $const5 	%argrw{"wrr"}
# jiTriplanar.osl:48
#     color pRotXY = rotate(pRotX, (rotation[1]/57.2958), point(0.0,0.0,0.0), point(0.0,1.0,0.0));
	compref		$tmp48 rotation $const9 	%filename{"jiTriplanar.osl"} %line{48} %argrw{"wrr"}
	div		$tmp49 $tmp48 $const4 	%argrw{"wrr"}
	functioncall	$const7 111 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp52 $const12 $const5 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp52 	%argrw{"wr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp49 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const8 ___257_cosang 	%line{273} %argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const3 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const9 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const10 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp53 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp54 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp55 $const8 $tmp54 	%argrw{"wrr"}
	mul		$tmp56 $tmp55 ___257_cosang 	%argrw{"wrr"}
	add		$tmp57 $tmp53 $tmp56 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp58 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp59 $tmp58 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp60 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp61 $tmp59 $tmp60 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp62 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp63 $tmp62 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp64 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp65 $tmp63 $tmp64 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp66 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp67 $tmp66 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp68 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp69 $tmp67 $tmp68 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp70 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp71 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp72 $const8 $tmp71 	%argrw{"wrr"}
	mul		$tmp73 $tmp72 ___257_cosang 	%argrw{"wrr"}
	add		$tmp74 $tmp70 $tmp73 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp75 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp76 $tmp75 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp77 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp78 $tmp76 $tmp77 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp79 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp80 $tmp79 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp81 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp82 $tmp80 $tmp81 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp83 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp84 $tmp83 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp85 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp86 $tmp84 $tmp85 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp87 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp88 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp89 $const8 $tmp88 	%argrw{"wrr"}
	mul		$tmp90 $tmp89 ___257_cosang 	%argrw{"wrr"}
	add		$tmp91 $tmp87 $tmp90 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp57 $tmp61 $tmp65 $const11 $tmp69 $tmp74 $tmp78 $const11 $tmp82 $tmp86 $tmp91 $const11 $const11 $const11 $const11 $const8 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp93 pRotX $const5 	%line{288} %argrw{"wrr"}
	transformv	$tmp92 ___257_M $tmp93 	%argrw{"wrr"}
	add		pRotXY $tmp92 $const5 	%argrw{"wrr"}
# jiTriplanar.osl:49
#     color pRotXYZ = rotate(pRotXY, (rotation[2]/57.2958), point(0.0,0.0,0.0), point(0.0,0.0,1.0));
	compref		$tmp94 rotation $const10 	%filename{"jiTriplanar.osl"} %line{49} %argrw{"wrr"}
	div		$tmp95 $tmp94 $const4 	%argrw{"wrr"}
	functioncall	$const7 164 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp98 $const13 $const5 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp98 	%argrw{"wr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp95 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const8 ___257_cosang 	%line{273} %argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const3 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const9 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const10 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp99 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp100 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp101 $const8 $tmp100 	%argrw{"wrr"}
	mul		$tmp102 $tmp101 ___257_cosang 	%argrw{"wrr"}
	add		$tmp103 $tmp99 $tmp102 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp104 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp105 $tmp104 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp106 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp107 $tmp105 $tmp106 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp108 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp109 $tmp108 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp110 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp111 $tmp109 $tmp110 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp112 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp113 $tmp112 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp114 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp115 $tmp113 $tmp114 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp116 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp117 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp118 $const8 $tmp117 	%argrw{"wrr"}
	mul		$tmp119 $tmp118 ___257_cosang 	%argrw{"wrr"}
	add		$tmp120 $tmp116 $tmp119 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp121 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp122 $tmp121 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp123 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp124 $tmp122 $tmp123 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp125 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp126 $tmp125 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp127 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp128 $tmp126 $tmp127 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp129 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp130 $tmp129 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp131 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp132 $tmp130 $tmp131 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp133 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp134 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp135 $const8 $tmp134 	%argrw{"wrr"}
	mul		$tmp136 $tmp135 ___257_cosang 	%argrw{"wrr"}
	add		$tmp137 $tmp133 $tmp136 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp103 $tmp107 $tmp111 $const11 $tmp115 $tmp120 $tmp124 $const11 $tmp128 $tmp132 $tmp137 $const11 $const11 $const11 $const11 $const8 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp139 pRotXY $const5 	%line{288} %argrw{"wrr"}
	transformv	$tmp138 ___257_M $tmp139 	%argrw{"wrr"}
	add		pRotXYZ $tmp138 $const5 	%argrw{"wrr"}
# jiTriplanar.osl:51
#     color nRotX = rotate(NN, (rotation[0]/57.2958), point(0.0,0.0,0.0), point(1.0,0.0,0.0));
	compref		$tmp140 rotation $const3 	%filename{"jiTriplanar.osl"} %line{51} %argrw{"wrr"}
	div		$tmp141 $tmp140 $const4 	%argrw{"wrr"}
	functioncall	$const7 217 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp144 $const6 $const5 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp144 	%argrw{"wr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp141 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const8 ___257_cosang 	%line{273} %argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const3 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const9 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const10 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp145 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp146 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp147 $const8 $tmp146 	%argrw{"wrr"}
	mul		$tmp148 $tmp147 ___257_cosang 	%argrw{"wrr"}
	add		$tmp149 $tmp145 $tmp148 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp150 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp151 $tmp150 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp152 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp153 $tmp151 $tmp152 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp154 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp155 $tmp154 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp156 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp157 $tmp155 $tmp156 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp158 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp159 $tmp158 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp160 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp161 $tmp159 $tmp160 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp162 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp163 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp164 $const8 $tmp163 	%argrw{"wrr"}
	mul		$tmp165 $tmp164 ___257_cosang 	%argrw{"wrr"}
	add		$tmp166 $tmp162 $tmp165 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp167 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp168 $tmp167 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp169 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp170 $tmp168 $tmp169 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp171 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp172 $tmp171 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp173 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp174 $tmp172 $tmp173 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp175 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp176 $tmp175 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp177 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp178 $tmp176 $tmp177 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp179 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp180 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp181 $const8 $tmp180 	%argrw{"wrr"}
	mul		$tmp182 $tmp181 ___257_cosang 	%argrw{"wrr"}
	add		$tmp183 $tmp179 $tmp182 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp149 $tmp153 $tmp157 $const11 $tmp161 $tmp166 $tmp170 $const11 $tmp174 $tmp178 $tmp183 $const11 $const11 $const11 $const11 $const8 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp185 NN $const5 	%line{288} %argrw{"wrr"}
	transformv	$tmp184 ___257_M $tmp185 	%argrw{"wrr"}
	add		nRotX $tmp184 $const5 	%argrw{"wrr"}
# jiTriplanar.osl:52
#     color nRotXY = rotate(nRotX, (rotation[1]/57.2958), point(0.0,0.0,0.0), point(0.0,1.0,0.0));
	compref		$tmp186 rotation $const9 	%filename{"jiTriplanar.osl"} %line{52} %argrw{"wrr"}
	div		$tmp187 $tmp186 $const4 	%argrw{"wrr"}
	functioncall	$const7 270 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp190 $const12 $const5 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp190 	%argrw{"wr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp187 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const8 ___257_cosang 	%line{273} %argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const3 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const9 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const10 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp191 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp192 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp193 $const8 $tmp192 	%argrw{"wrr"}
	mul		$tmp194 $tmp193 ___257_cosang 	%argrw{"wrr"}
	add		$tmp195 $tmp191 $tmp194 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp196 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp197 $tmp196 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp198 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp199 $tmp197 $tmp198 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp200 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp201 $tmp200 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp202 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp203 $tmp201 $tmp202 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp204 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp205 $tmp204 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp206 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp207 $tmp205 $tmp206 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp208 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp209 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp210 $const8 $tmp209 	%argrw{"wrr"}
	mul		$tmp211 $tmp210 ___257_cosang 	%argrw{"wrr"}
	add		$tmp212 $tmp208 $tmp211 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp213 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp214 $tmp213 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp215 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp216 $tmp214 $tmp215 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp217 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp218 $tmp217 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp219 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp220 $tmp218 $tmp219 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp221 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp222 $tmp221 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp223 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp224 $tmp222 $tmp223 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp225 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp226 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp227 $const8 $tmp226 	%argrw{"wrr"}
	mul		$tmp228 $tmp227 ___257_cosang 	%argrw{"wrr"}
	add		$tmp229 $tmp225 $tmp228 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp195 $tmp199 $tmp203 $const11 $tmp207 $tmp212 $tmp216 $const11 $tmp220 $tmp224 $tmp229 $const11 $const11 $const11 $const11 $const8 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp231 nRotX $const5 	%line{288} %argrw{"wrr"}
	transformv	$tmp230 ___257_M $tmp231 	%argrw{"wrr"}
	add		nRotXY $tmp230 $const5 	%argrw{"wrr"}
# jiTriplanar.osl:53
#     color nRotXYZ = rotate(nRotXY, (rotation[2]/57.2958), point(0.0,0.0,0.0), point(0.0,0.0,1.0));
	compref		$tmp232 rotation $const10 	%filename{"jiTriplanar.osl"} %line{53} %argrw{"wrr"}
	div		$tmp233 $tmp232 $const4 	%argrw{"wrr"}
	functioncall	$const7 323 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp236 $const13 $const5 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp236 	%argrw{"wr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp233 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const8 ___257_cosang 	%line{273} %argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const3 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const9 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const10 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp237 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp238 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp239 $const8 $tmp238 	%argrw{"wrr"}
	mul		$tmp240 $tmp239 ___257_cosang 	%argrw{"wrr"}
	add		$tmp241 $tmp237 $tmp240 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp242 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp243 $tmp242 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp244 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp245 $tmp243 $tmp244 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp246 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp247 $tmp246 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp248 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp249 $tmp247 $tmp248 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp250 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp251 $tmp250 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp252 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp253 $tmp251 $tmp252 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp254 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp255 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp256 $const8 $tmp255 	%argrw{"wrr"}
	mul		$tmp257 $tmp256 ___257_cosang 	%argrw{"wrr"}
	add		$tmp258 $tmp254 $tmp257 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp259 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp260 $tmp259 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp261 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp262 $tmp260 $tmp261 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp263 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp264 $tmp263 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp265 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp266 $tmp264 $tmp265 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp267 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp268 $tmp267 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp269 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp270 $tmp268 $tmp269 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp271 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp272 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp273 $const8 $tmp272 	%argrw{"wrr"}
	mul		$tmp274 $tmp273 ___257_cosang 	%argrw{"wrr"}
	add		$tmp275 $tmp271 $tmp274 	%argrw{"wrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp241 $tmp245 $tmp249 $const11 $tmp253 $tmp258 $tmp262 $const11 $tmp266 $tmp270 $tmp275 $const11 $const11 $const11 $const11 $const8 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp277 nRotXY $const5 	%line{288} %argrw{"wrr"}
	transformv	$tmp276 ___257_M $tmp277 	%argrw{"wrr"}
	add		nRotXYZ $tmp276 $const5 	%argrw{"wrr"}
# jiTriplanar.osl:57
#     float nNx = clamp((1-clamp((1-abs(nRotXYZ[0])) * (1/(1-xmin)),0,1)) * 1/xmax,0,1);
	compref		$tmp280 nRotXYZ $const3 	%filename{"jiTriplanar.osl"} %line{57} %argrw{"wrr"}
	abs		$tmp279 $tmp280 	%argrw{"wr"}
	sub		$tmp281 $const8 $tmp279 	%argrw{"wrr"}
	sub		$tmp282 $const8 xmin 	%argrw{"wrr"}
	div		$tmp283 $const8 $tmp282 	%argrw{"wrr"}
	mul		$tmp284 $tmp281 $tmp283 	%argrw{"wrr"}
	functioncall	$const14 332 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp285 $tmp284 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp278 $tmp285 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:57
#     float nNx = clamp((1-clamp((1-abs(nRotXYZ[0])) * (1/(1-xmin)),0,1)) * 1/xmax,0,1);
	sub		$tmp286 $const8 $tmp278 	%filename{"jiTriplanar.osl"} %line{57} %argrw{"wrr"}
	mul		$tmp287 $tmp286 $const8 	%argrw{"wrr"}
	div		$tmp288 $tmp287 xmax 	%argrw{"wrr"}
	functioncall	$const14 338 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp289 $tmp288 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		nNx $tmp289 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:58
#     float nNy = clamp((1-clamp((1-abs(nRotXYZ[1])) * (1/(1-ymin)),0,1)) * 1/ymax,0,1);
	compref		$tmp292 nRotXYZ $const9 	%filename{"jiTriplanar.osl"} %line{58} %argrw{"wrr"}
	abs		$tmp291 $tmp292 	%argrw{"wr"}
	sub		$tmp293 $const8 $tmp291 	%argrw{"wrr"}
	sub		$tmp294 $const8 ymin 	%argrw{"wrr"}
	div		$tmp295 $const8 $tmp294 	%argrw{"wrr"}
	mul		$tmp296 $tmp293 $tmp295 	%argrw{"wrr"}
	functioncall	$const14 347 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp297 $tmp296 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp290 $tmp297 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:58
#     float nNy = clamp((1-clamp((1-abs(nRotXYZ[1])) * (1/(1-ymin)),0,1)) * 1/ymax,0,1);
	sub		$tmp298 $const8 $tmp290 	%filename{"jiTriplanar.osl"} %line{58} %argrw{"wrr"}
	mul		$tmp299 $tmp298 $const8 	%argrw{"wrr"}
	div		$tmp300 $tmp299 ymax 	%argrw{"wrr"}
	functioncall	$const14 353 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp301 $tmp300 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		nNy $tmp301 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:59
#     float nNz = clamp((1-clamp((1-abs(nRotXYZ[2])) * (1/(1-zmin)),0,1)) * 1/zmax,0,1);
	compref		$tmp304 nRotXYZ $const10 	%filename{"jiTriplanar.osl"} %line{59} %argrw{"wrr"}
	abs		$tmp303 $tmp304 	%argrw{"wr"}
	sub		$tmp305 $const8 $tmp303 	%argrw{"wrr"}
	sub		$tmp306 $const8 zmin 	%argrw{"wrr"}
	div		$tmp307 $const8 $tmp306 	%argrw{"wrr"}
	mul		$tmp308 $tmp305 $tmp307 	%argrw{"wrr"}
	functioncall	$const14 362 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp309 $tmp308 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp302 $tmp309 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:59
#     float nNz = clamp((1-clamp((1-abs(nRotXYZ[2])) * (1/(1-zmin)),0,1)) * 1/zmax,0,1);
	sub		$tmp310 $const8 $tmp302 	%filename{"jiTriplanar.osl"} %line{59} %argrw{"wrr"}
	mul		$tmp311 $tmp310 $const8 	%argrw{"wrr"}
	div		$tmp312 $tmp311 zmax 	%argrw{"wrr"}
	functioncall	$const14 368 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp313 $tmp312 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		nNz $tmp313 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:65
#     if ( use_breakup == 0 ){
	eq		$tmp314 use_breakup $const3 	%filename{"jiTriplanar.osl"} %line{65} %argrw{"wrr"}
	if		$tmp314 373 406 	%argrw{"r"}
# jiTriplanar.osl:66
#         Nx = nNx;
	assign		Nx nNx 	%line{66} %argrw{"wr"}
# jiTriplanar.osl:67
#         Ny = nNy;
	assign		Ny nNy 	%line{67} %argrw{"wr"}
# jiTriplanar.osl:68
#         Nz = nNz;
	assign		Nz nNz 	%line{68} %argrw{"wr"}
# jiTriplanar.osl:70
#         float breakup = clamp(breakup_input,0,1);
	functioncall	$const14 376 	%line{70} %argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp315 breakup_input $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___338_breakup $tmp315 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:71
#         Nx = clamp(pow(nNx*(2*breakup+(nNx*(1-breakup*nNx))), breakup_exponent),0,1);
	mul		$tmp317 $const15 ___338_breakup 	%filename{"jiTriplanar.osl"} %line{71} %argrw{"wrr"}
	mul		$tmp318 ___338_breakup nNx 	%argrw{"wrr"}
	sub		$tmp319 $const8 $tmp318 	%argrw{"wrr"}
	mul		$tmp320 nNx $tmp319 	%argrw{"wrr"}
	add		$tmp321 $tmp317 $tmp320 	%argrw{"wrr"}
	mul		$tmp322 nNx $tmp321 	%argrw{"wrr"}
	pow		$tmp316 $tmp322 breakup_exponent 	%argrw{"wrr"}
	functioncall	$const14 386 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp323 $tmp316 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		Nx $tmp323 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:72
#         Ny = clamp(pow(nNy*(2*breakup+(nNy*(1-breakup*nNy))), breakup_exponent),0,1);
	mul		$tmp325 $const15 ___338_breakup 	%filename{"jiTriplanar.osl"} %line{72} %argrw{"wrr"}
	mul		$tmp326 ___338_breakup nNy 	%argrw{"wrr"}
	sub		$tmp327 $const8 $tmp326 	%argrw{"wrr"}
	mul		$tmp328 nNy $tmp327 	%argrw{"wrr"}
	add		$tmp329 $tmp325 $tmp328 	%argrw{"wrr"}
	mul		$tmp330 nNy $tmp329 	%argrw{"wrr"}
	pow		$tmp324 $tmp330 breakup_exponent 	%argrw{"wrr"}
	functioncall	$const14 396 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp331 $tmp324 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		Ny $tmp331 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:73
#         Nz = clamp(pow(nNz*(2*breakup+(nNz*(1-breakup*nNz))), breakup_exponent),0,1);
	mul		$tmp333 $const15 ___338_breakup 	%filename{"jiTriplanar.osl"} %line{73} %argrw{"wrr"}
	mul		$tmp334 ___338_breakup nNz 	%argrw{"wrr"}
	sub		$tmp335 $const8 $tmp334 	%argrw{"wrr"}
	mul		$tmp336 nNz $tmp335 	%argrw{"wrr"}
	add		$tmp337 $tmp333 $tmp336 	%argrw{"wrr"}
	mul		$tmp338 nNz $tmp337 	%argrw{"wrr"}
	pow		$tmp332 $tmp338 breakup_exponent 	%argrw{"wrr"}
	functioncall	$const14 406 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp339 $tmp332 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		Nz $tmp339 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:79
#     outRGB = mix(mix(mix(input,(color) texture(filename, pRotXYZ[0]*ztile, pRotXYZ[1]*ztile, "wrap", "periodic"),Nz), (color) texture(filename, pRotXYZ[0]*ytile, pRotXYZ[2]*ytile, "wrap", "periodic"), Ny), (color) texture(filename, pRotXYZ[1]*xtile, pRotXYZ[2]*xtile, "wrap", "periodic"), Nx);
	compref		$tmp343 pRotXYZ $const3 	%filename{"jiTriplanar.osl"} %line{79} %argrw{"wrr"}
	mul		$tmp344 $tmp343 ztile 	%argrw{"wrr"}
	compref		$tmp345 pRotXYZ $const9 	%argrw{"wrr"}
	mul		$tmp346 $tmp345 ztile 	%argrw{"wrr"}
	texture		$tmp342 filename $tmp344 $tmp346 $const16 $const17 	%argrw{"wrrrrr"} %argderivs{2,3}
	mix		$tmp341 input $tmp342 Nz 	%argrw{"wrrr"}
	compref		$tmp348 pRotXYZ $const3 	%argrw{"wrr"}
	mul		$tmp349 $tmp348 ytile 	%argrw{"wrr"}
	compref		$tmp350 pRotXYZ $const10 	%argrw{"wrr"}
	mul		$tmp351 $tmp350 ytile 	%argrw{"wrr"}
	texture		$tmp347 filename $tmp349 $tmp351 $const16 $const17 	%argrw{"wrrrrr"} %argderivs{2,3}
	mix		$tmp340 $tmp341 $tmp347 Ny 	%argrw{"wrrr"}
	compref		$tmp353 pRotXYZ $const9 	%argrw{"wrr"}
	mul		$tmp354 $tmp353 xtile 	%argrw{"wrr"}
	compref		$tmp355 pRotXYZ $const10 	%argrw{"wrr"}
	mul		$tmp356 $tmp355 xtile 	%argrw{"wrr"}
	texture		$tmp352 filename $tmp354 $tmp356 $const16 $const17 	%argrw{"wrrrrr"} %argderivs{2,3}
	mix		outRGB $tmp340 $tmp352 Nx 	%argrw{"wrrr"}
# jiTriplanar.osl:82
#     outA = clamp((Nx+Ny+Nz)-(Nx*Ny*Nz),0,1); 
	add		$tmp357 Nx Ny 	%line{82} %argrw{"wrr"}
	add		$tmp358 $tmp357 Nz 	%argrw{"wrr"}
	mul		$tmp359 Nx Ny 	%argrw{"wrr"}
	mul		$tmp360 $tmp359 Nz 	%argrw{"wrr"}
	sub		$tmp361 $tmp358 $tmp360 	%argrw{"wrr"}
	functioncall	$const14 432 	%argrw{"r"}
# /opt/solidangle/mtoa/2019/osl/include/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp362 $tmp361 $const8 	%filename{"/opt/solidangle/mtoa/2019/osl/include/stdosl.h"} %line{141} %argrw{"wrr"}
	max		outA $tmp362 $const11 	%argrw{"wrr"}
# jiTriplanar.osl:84
#     outAreaMask = mix(mix(mix(input,color(0,0,1),Nz), color(0,1,0),Ny), color(1,0,0),Nx);
	mix		$tmp364 input $const18 Nz 	%filename{"jiTriplanar.osl"} %line{84} %argrw{"wrrr"}
	mix		$tmp363 $tmp364 $const19 Ny 	%argrw{"wrrr"}
	mix		outAreaMask $tmp363 $const20 Nx 	%argrw{"wrrr"}
	end
